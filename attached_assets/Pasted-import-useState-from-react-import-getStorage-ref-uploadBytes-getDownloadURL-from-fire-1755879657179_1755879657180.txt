import { useState } from "react";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { getFirestore, addDoc, collection, serverTimestamp } from "firebase/firestore";
import { app } from "../firebase";
import { useAuth } from "../AuthContext"; // Assuming you have auth context

const storage = getStorage(app);
const db = getFirestore(app);

export default function UploadProject() {
  const { currentUser } = useAuth();
  const [title, setTitle] = useState("");
  const [description, setDescription] = useState("");
  const [thumbnail, setThumbnail] = useState<File | null>(null);
  const [video, setVideo] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);

  const handleUpload = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!title || !video || !currentUser) return alert("Missing fields!");

    setLoading(true);

    try {
      const videoRef = ref(storage, `videos/${currentUser.uid}/${video.name}`);
      const thumbnailRef = thumbnail
        ? ref(storage, `thumbnails/${currentUser.uid}/${thumbnail.name}`)
        : null;

      await uploadBytes(videoRef, video);
      const videoUrl = await getDownloadURL(videoRef);

      let thumbnailUrl = "";
      if (thumbnailRef && thumbnail) {
        await uploadBytes(thumbnailRef, thumbnail);
        thumbnailUrl = await getDownloadURL(thumbnailRef);
      }

      await addDoc(collection(db, "projects"), {
        uid: currentUser.uid,
        title,
        description,
        videoUrl,
        thumbnailUrl,
        createdAt: serverTimestamp(),
      });

      alert("Upload successful!");
      setTitle("");
      setDescription("");
      setThumbnail(null);
      setVideo(null);
    } catch (err) {
      console.error("Upload error", err);
      alert("Upload failed.");
    }

    setLoading(false);
  };

  return (
    <div style={{ padding: "2rem" }}>
      <h2>Upload a New Project</h2>
      <form onSubmit={handleUpload}>
        <input
          type="text"
          placeholder="Project Title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
        />
        <br />
        <textarea
          placeholder="Short Description"
          value={description}
          onChange={(e) => setDescription(e.target.value)}
        />
        <br />
        <input type="file" accept="image/*" onChange={(e) => setThumbnail(e.target.files?.[0] || null)} />
        <br />
        <input type="file" accept="video/*" onChange={(e) => setVideo(e.target.files?.[0] || null)} required />
        <br />
        <button type="submit" disabled={loading}>
          {loading ? "Uploading..." : "Upload Project"}
        </button>
      </form>
    </div>
  );
}
