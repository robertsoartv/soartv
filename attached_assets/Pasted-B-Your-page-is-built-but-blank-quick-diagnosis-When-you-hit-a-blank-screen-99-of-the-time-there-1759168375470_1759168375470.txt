B) Your page is built but blank — quick diagnosis
When you hit a blank screen, 99% of the time there’s a client-side JS error. The server can happily serve index.html, but React/Vite crashes on load.
Do these two checks:
Browser DevTools → Console on your Heroku URL.
Copy the first error you see (it’s gold).
Common ones and fixes are below.
Browser DevTools → Network: load / and click index-xxxxx.js.
If it’s 404 or blocked, assets path/base is wrong.
Common blank-screen causes (and exact fixes)
1) Missing client env vars (Firebase, etc.)
Symptoms: errors like FirebaseError: Firebase: No Firebase App '[DEFAULT]' has been created... or undefined is not an object when reading import.meta.env.VITE_*.
Fix: On Heroku → Settings → Config Vars, add all client envs with VITE_ prefix:
VITE_FIREBASE_API_KEY=...
VITE_FIREBASE_AUTH_DOMAIN=...
VITE_FIREBASE_PROJECT_ID=...
etc.
Rebuild/redeploy.
2) Wrong Vite base / asset paths
Symptoms: Network tab shows GET /soartv/assets/... 404 or GET /assets/... 404.
Fix: In vite.config.ts, make sure:
export default defineConfig({
  base: '/',             // <-- for Heroku root
  build: { outDir: 'dist/public' }
});
Rebuild.
3) Serving the wrong folder
Symptoms: ENOENT ... dist/public/index.html in logs, or blank with no assets loading.
Fix: Your server must serve Vite’s folder:
// server.js (ESM)
import path from 'path'; import { fileURLToPath } from 'url';
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const distPath = path.join(__dirname, 'dist', 'public');
app.use(express.static(distPath));
app.get('*', (_req,res)=>res.sendFile(path.join(distPath,'index.html')));
4) Using Node-only libraries on the client
Symptoms: process is not defined, fs is not defined, Buffer is not defined in the browser console.
Fix: Remove/guard Node APIs from code that runs in the browser, or polyfill intentionally.
5) Two servers / wrong start script
Symptoms: Heroku logs show MODULE_NOT_FOUND or server starts without pointing to the right server.js.
Fix: In package.json:
"start": "node server.js"
and ensure server.js is at the root. Only one start path.
C) A clean, stable deployment path (no Replit involved)
Since you already have a GitHub repo:
Commit these files to GitHub (root):
server.js (ESM) that serves dist/public (snippet above).
Procfile:
web: npm start
.slugignore to keep the slug small (you have large videos):
attached_assets/
*.mp4
*.mov
*.zip
package.json (key parts):
{
  "type": "module",
  "engines": { "node": "20.x", "npm": "9.x" },
  "scripts": {
    "start": "node server.js",
    "build": "vite build --config ./vite.config.ts",
    "heroku-postbuild": "NPM_CONFIG_PRODUCTION=false npm install --force --legacy-peer-deps --no-audit --no-fund && npm run build && npm prune --production"
  },
  "dependencies": {
    "express": "^4.21.2"
  }
}
Heroku Settings → Config Vars
Keep NODE_ENV=production, NPM_CONFIG_PRODUCTION=false.
Add all VITE_... envs your app uses.