// client/src/pages/profile.tsx

import { useState, useEffect } from "react";
import { getAuth, onAuthStateChanged, User } from "firebase/auth";
import { getFirestore, doc, getDoc, setDoc } from "firebase/firestore";
import { getStorage, ref, uploadBytes, getDownloadURL } from "firebase/storage";
import { app } from "../firebase";

const auth = getAuth(app);
const db = getFirestore(app);
const storage = getStorage(app);

export default function Profile() {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  const [name, setName] = useState("");
  const [bio, setBio] = useState("");
  const [role, setRole] = useState("");
  const [profilePhotoUrl, setProfilePhotoUrl] = useState("");

  useEffect(() => {
    const unsubscribe = onAuthStateChanged(auth, async (currentUser) => {
      if (!currentUser) {
        window.location.href = "/login";
      } else {
        setUser(currentUser);
        await fetchProfile(currentUser.uid);
        setLoading(false);
      }
    });

    return () => unsubscribe();
  }, []);

  const fetchProfile = async (uid: string) => {
    const userRef = doc(db, "users", uid);
    const userSnap = await getDoc(userRef);
    if (userSnap.exists()) {
      const data = userSnap.data();
      setName(data.name || "");
      setBio(data.bio || "");
      setRole(data.role || "");
      setProfilePhotoUrl(data.profilePhotoUrl || "");
    }
  };

  const saveProfile = async () => {
    if (!user) return;
    const userRef = doc(db, "users", user.uid);
    await setDoc(userRef, { name, bio, role, profilePhotoUrl }, { merge: true });
    alert("Profile updated!");
  };

  const handleFileChange = async (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (!file || !user) return;

    const fileRef = ref(storage, `profilePhotos/${user.uid}`);
    await uploadBytes(fileRef, file);
    const downloadURL = await getDownloadURL(fileRef);
    setProfilePhotoUrl(downloadURL);
  };

  if (loading) return <p>Loading profile...</p>;

  return (
    <div style={{ padding: "2rem", maxWidth: "600px", margin: "0 auto" }}>
      <h1>Edit Your Filmmaker Profile</h1>

      {profilePhotoUrl && (
        <img src={profilePhotoUrl} alt="Profile" width={150} height={150} />
      )}

      <div>
        <label>Upload Profile Photo:</label>
        <input type="file" accept="image/*" onChange={handleFileChange} />
      </div>

      <label>Name:</label>
      <input value={name} onChange={(e) => setName(e.target.value)} />

      <label>Role (e.g. Director, Editor):</label>
      <input value={role} onChange={(e) => setRole(e.target.value)} />

      <label>Bio:</label>
      <textarea value={bio} onChange={(e) => setBio(e.target.value)} />

      <button onClick={saveProfile} style={{ marginTop: "1rem" }}>
        Save Profile
      </button>
    </div>
  );
}
